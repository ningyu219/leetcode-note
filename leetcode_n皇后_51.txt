51. leetcode最快解法：

private List<List<String>> res = new ArrayList<List<String>>();
	private boolean[] cols;
	private boolean[] diag1;
	private boolean[] diag2;
	private char[][] board;
	public void nQueens(int n, int row){
		if(row >= n){
			List<String> sol = new ArrayList<String>();
			for(int i=0; i<n; i++){
				sol.add(new String(board[i]));
			}
			res.add(sol);
			return ;
		}
		for(int i=0; i<n; i++){
			if(!cols[i] && !diag1[i+row] && !diag2[row-i+n]){
				cols[i] = true;
				diag1[i+row] = true;
				diag2[row-i+n] = true;
				board[row][i] = 'Q';

				nQueens(n, row+1);

				//换一列
				cols[i] = false;
				diag1[i+row] = false;
				diag2[row-i+n] = false;
				board[row][i] = '.';
			}
		}
	}
    public List<List<String>> solveNQueens(int n) {
        if(n<=0) return res;
    	cols = new boolean[n];
    	diag1 = new boolean[2*n];
    	diag2 = new boolean[2*n];
    	board = new char[n][n];
    	for(int i=0; i<n; i++){
    		for(int j=0; j<n; j++){
    			board[i][j] = '.';
    		}
    	}
    	nQueens(n, 0);
    	return res;
    }
	
解法二：
class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();  
        int[] queenList = new int[n]; //第i个位置存放的数表示row行时，Q的列  
        placeQueen(queenList, 0, n, res);//在第0行放Q  
        return res;  
    }  
    private void placeQueen(int[] queenList, int row, int n, List<List<String>> res) {  
        //如果已经填满，就生成结果  
        if (row == n) {  
            ArrayList<String> list = new ArrayList<String>();  
            for (int i = 0; i < n; i++) {  
                String str = "";  
                for (int col = 0; col < n; col++){  
                    if(queenList[i] == col) {  
                        str += "Q";  
                    } else {  
                        str += ".";  
                    }  
                }  
                list.add(str);  
            }  
            res.add(list);  
        }  
        for (int col = 0; col < n; col++) {//循环每一列  
            if (isValid(queenList, row, col)) { //如果在该列放入Q不冲突的话  
                queenList[row] = col;  
                placeQueen(queenList, row + 1, n, res);  
            }  
        }
}
    
     
      
    private boolean isValid(int[] queenList, int row, int col) {  
        for (int i = 0; i < row; i++) {  
            int pos = queenList[i];  
            if (pos == col) { //和新加入的Q处于同一列  
                return false;  
            }  
            if (pos + row - i == col) { //在新加入的Q的右对角线上  
                return false;  
            }  
            if (pos - row + i == col) { //在新加入的Q的左对角线上  
                return false;  
            }  
        }  
        return true;  
    }  
}